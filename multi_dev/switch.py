
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# switch.py - Alpaca API responders for Switch
#
# Author:   Your R. Name <your@email.org> (abc)
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
# ??-???-????   abc Initial edit

from falcon import Request, Response, HTTPBadRequest, before
from logging import Logger
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \
                get_request_field, to_bool, to_int, to_float
from exceptions import *        # Nothing but exception classes
from switchdevice import SwitchDevice

logger: Logger = None

# ----------------------
# MULTI-INSTANCE SUPPORT
# ----------------------
# If this is > 0 then it means that multiple devices of this type are supported.
# Each responder on_get() and on_put() is called with a devnum parameter to indicate
# which instance of the device (0-based) is being called by the client. Leave this
# set to 0 for the simple case of controlling only one instance of this device type.
#
maxdev = 0                      # Single instance

# -----------
# DEVICE INFO
# -----------
# Static metadata not subject to configuration changes
## EDIT FOR YOUR DEVICE ##
class SwitchMetadata:
    """ Metadata describing the Switch Device. Edit for your device"""
    Name = 'Sample Switch'
    Version = '0.1'
    Description = 'My ASCOM Switch'
    DeviceType = 'Switch'
    DeviceID = '8EE04412-83B1-4210-AC24-7655DEDA4541' # https://guidgenerator.com/online-guid-generator.aspx
    Info = 'Alpaca Sample Device\nImplements ISwitch\nASCOM Initiative'
    MaxDeviceNumber = maxdev
    InterfaceVersion = 2 ##YOUR DEVICE INTERFACE VERSION##        # ISwitchVxxx

# --------------------
# SWITCH DEVICE ()
# --------------------
#import RPi.GPIO as GPIO
#GPIO.setmode(GPIO.BCM)

swt_dev = None
# At app init not import :-)
def start_swt_device(logger: logger):
    global swt_dev
    swt_dev = SwitchDevice(logger)
    swt_dev._logger.info('Switch availables')
    for dev, val in swt_dev.__class__._switch.items():
        swt_dev._logger.info(f"{val['Name']}: {val['Switchpinout']}")


# --------------------
# RESOURCE CONTROLLERS
# --------------------

@before(PreProcessRequest(maxdev))
class Action:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandBlind:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandBool:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandString():
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class Description():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(SwitchMetadata.Description, req).json

@before(PreProcessRequest(maxdev))
class DriverInfo():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(SwitchMetadata.Info, req).json

@before(PreProcessRequest(maxdev))
class InterfaceVersion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(SwitchMetadata.InterfaceVersion, req).json

@before(PreProcessRequest(maxdev))
class DriverVersion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(SwitchMetadata.Version, req).json

@before(PreProcessRequest(maxdev))
class Name():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(SwitchMetadata.Name, req).json

@before(PreProcessRequest(maxdev))
class SupportedActions():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse([], req).json  # Not PropertyNotImplemented

@before(PreProcessRequest(maxdev))
class Connected:
    """Retrieves or sets the connected state of the device
    * Set True to connect to the device hardware. Set False to disconnect
      from the device hardware. Client can also read the property to check
      whether it is connected. This reports the current hardware state.
    * Multiple calls setting Connected to true or false must not cause
      an error.

    """
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(swt_dev.connected, req).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        conn_str = get_request_field('Connected', req)
        conn = to_bool(conn_str)              # Raises 400 Bad Request if str to bool fails

        try:
            # ----------------------
            swt_dev.connected = conn
            # ----------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req, # Put is actually like a method :-(
                            DriverException(0x500, f'{self.__class__.__name__} failed', ex)).json

@before(PreProcessRequest(maxdev))
class maxswitch:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        try:
            # ----------------------
            val = swt_dev.maxswitch
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Maxswitch failed', ex)).json

@before(PreProcessRequest(maxdev))
class canwrite:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        idstr = get_request_field('ID', req) # Raises 400 bad request if missing
        #if len(idstr) == 0:
        #         idstr = get_request_field('ID', req) # Raises 400 bad request if missing
        try:
            idx = to_int(idstr)
            if idx < 0 or idx >= swt_dev.maxswitch:
                resp.text = MethodResponse(req,
                                InvalidValueException(f'Id {idx} outside the range [0-{swt_dev.maxswitch}].')).json
                return
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id {idstr} not a valid number.')).json
            return
        
        try:
            # ----------------------
            val = swt_dev.get_canwrite(idx)
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Canwrite failed', ex)).json

@before(PreProcessRequest(maxdev))
class getswitch:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        idstr = get_request_field('ID', req)      # Raises 400 bad request if missing
        #if len(idstr) == 0:
        #         idstr = get_request_field('ID', req) # Raises 400 bad request if missing
        try:
            idx = to_int(idstr)
            if idx < 0 or idx >= swt_dev.maxswitch:
                resp.text = MethodResponse(req,
                                InvalidValueException(f'Id {idx} outside the range [0-{swt_dev.maxswitch}].')).json
                return
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id {idstr} not a valid number.')).json
            return
        
        try:
            # ----------------------
            val = swt_dev.get_switch(idx)
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Getswitch failed', ex)).json

@before(PreProcessRequest(maxdev))
class getswitchdescription:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        idstr = get_request_field('ID', req)      # Raises 400 bad request if missing
        #if len(idstr) == 0:
        #         idstr = get_request_field('ID', req) # Raises 400 bad request if missing
        try:
            idx = to_int(idstr)
            if idx < 0 or idx >= swt_dev.maxswitch:
                resp.text = MethodResponse(req,
                                InvalidValueException(f'Id {idx} outside the range [0-{swt_dev.maxswitch}].')).json
                return
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id {idstr} not a valid number.')).json
            return
        
        try:
            # ----------------------
            val = swt_dev.get_switchdescription(idx)
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Getswitchdescription failed', ex)).json

@before(PreProcessRequest(maxdev))
class getswitchname:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        idstr = get_request_field('ID', req)      # Raises 400 bad request if missing
        #if len(idstr) == 0:
        #         idstr = get_request_field('ID', req) # Raises 400 bad request if missing
        try:
            idx = to_int(idstr)
            if idx < 0 or idx >= swt_dev.maxswitch:
                resp.text = MethodResponse(req,
                                InvalidValueException(f'Id {idx} outside the range [0-{swt_dev.maxswitch}].')).json
                return
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id {idstr} not a valid number.')).json
            return
        
        try:
            # ----------------------
            val = swt_dev.get_switchname(idx)
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Getswitchname failed', ex)).json

@before(PreProcessRequest(maxdev))
class getswitchvalue:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        idstr = get_request_field('ID', req)      # Raises 400 bad request if missing
        #if len(idstr) == 0:
        #         idstr = get_request_field('ID', req) # Raises 400 bad request if missing
        try:
            idx = to_int(idstr)
            if idx < 0 or idx >= swt_dev.maxswitch:
                resp.text = MethodResponse(req,
                                InvalidValueException(f'Id {idx} outside the range [0-{swt_dev.maxswitch}].')).json
                return
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id {idstr} not a valid number.')).json
            return
        
        try:
            # ----------------------
            val = float(swt_dev.get_switch(idx))
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Getswitchvalue failed', ex)).json

@before(PreProcessRequest(maxdev))
class minswitchvalue:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        idstr = get_request_field('ID', req)      # Raises 400 bad request if missing
        #if len(idstr) == 0:
        #         idstr = get_request_field('ID', req) # Raises 400 bad request if missing
        try:
            idx = to_int(idstr)
            if idx < 0 or idx >= swt_dev.maxswitch:
                resp.text = MethodResponse(req,
                                InvalidValueException(f'Id {idx} outside the range [0-{swt_dev.maxswitch}].')).json
                return
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id {idstr} not a valid number.')).json
            return
        
        try:
            # ----------------------
            val = swt_dev.get_minswitchvalue(idx)
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Minswitchvalue failed', ex)).json

@before(PreProcessRequest(maxdev))
class maxswitchvalue:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        idstr = get_request_field('ID', req)      # Raises 400 bad request if missing
        #if len(idstr) == 0:
        #         idstr = get_request_field('ID', req) # Raises 400 bad request if missing
        try:
            idx = to_int(idstr)
            if idx < 0 or idx >= swt_dev.maxswitch:
                resp.text = MethodResponse(req,
                                InvalidValueException(f'Id {idx} outside the range [0-{swt_dev.maxswitch}].')).json
                return
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id {idstr} not a valid number.')).json
            return
        
        try:
            # ----------------------
            val = swt_dev.get_maxswitchvalue(idx)
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Maxswitchvalue failed', ex)).json

@before(PreProcessRequest(maxdev))
class setswitch:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        idstr = get_request_field('ID', req)      # Raises 400 bad request if missing
        #if len(idstr) == 0:
        #         idstr = get_request_field('ID', req) # Raises 400 bad request if missing
        try:
            idx = to_int(idstr)
            if idx < 0 or idx >= swt_dev.maxswitch:
                resp.text = MethodResponse(req,
                                InvalidValueException(f'Id {idx} outside the range [0-{swt_dev.maxswitch}].')).json
                return
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id {idstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        statestr = get_request_field('State', req)      # Raises 400 bad request if missing
        state = to_bool(statestr)                       # Same here

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            swt_dev.set_switch(idx, state)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Switch.Setswitch failed', ex)).json

    """ def on_put(self, req: Request, resp: Response, devnum: int):
        if not ## IS DEV CONNECTED ##:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Switch.Setswitch failed', ex)).json """

@before(PreProcessRequest(maxdev))
class setswitchname:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        idstr = get_request_field('ID', req)      # Raises 400 bad request if missing
        #if len(idstr) == 0:
        #         idstr = get_request_field('ID', req) # Raises 400 bad request if missing
        try:
            idx = to_int(idstr)
            if idx < 0 or idx >= swt_dev.maxswitch:
                resp.text = MethodResponse(req,
                                InvalidValueException(f'Id {idx} outside the range [0-{swt_dev.maxswitch}].')).json
                return
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id {idstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        namestr = get_request_field('Name', req)      # Raises 400 bad request if missing
        try:
            name = str(namestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Name {namestr} not a valid string.')).json
            return

        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            swt_dev.set_switchname(idx, name)
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Switch.Setswitchname failed', ex)).json

    """ def on_put(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Switch.Setswitchname failed', ex)).json """

@before(PreProcessRequest(maxdev))
class setswitchvalue:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        idstr = get_request_field('ID', req)      # Raises 400 bad request if missing
        #if len(idstr) == 0:
        #         idstr = get_request_field('ID', req) # Raises 400 bad request if missing
        try:
            idx = to_int(idstr)
            if idx < 0 or idx >= swt_dev.maxswitch:
                resp.text = MethodResponse(req,
                                InvalidValueException(f'Id {idx} outside the range [0-{swt_dev.maxswitch}].')).json
                return
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id {idstr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        valuestr = get_request_field('Value', req)      # Raises 400 bad request if missing
        try:
            value = to_float(valuestr)
            if value < 0 or value > swt_dev._maxswitchvalue:
                resp.text = MethodResponse(req,
                                InvalidValueException(f'The value for the switch {id} is outside the range'
                                                       f'[{swt_dev._minswitchvalue}-{swt_dev._maxswitchvalue}].')).json
                return
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Value {valuestr} not a valid number.')).json
            return
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            swt_dev.set_switch(idx, bool(value))
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Switch.Setswitchvalue failed', ex)).json

    """ def on_put(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Switch.Setswitchvalue failed', ex)).json """

@before(PreProcessRequest(maxdev))
class switchstep:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not swt_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        idstr = get_request_field('Id', req)      # Raises 400 bad request if missing
        if len(idstr) == 0:
                 idstr = get_request_field('ID', req) # Raises 400 bad request if missing
        try:
            idx = to_int(idstr)
            if idx < 0 or idx >= swt_dev.maxswitch:
                resp.text = MethodResponse(req,
                                InvalidValueException(f'Id {idx} outside the range [0-{swt_dev.maxswitch}].')).json
                return
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Id {idstr} not a valid number.')).json
            return
        
        try:
            # ----------------------
            val = swt_dev.get_switchstep(idx)
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Switch.Switchstep failed', ex)).json

