
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# Driver for the control of 8 switch board
#
# Author:   Luca Rosignoli
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
#
import RPi.GPIO as GPIO
from logging import Logger

GPIO.setmode(GPIO.BCM)

class SwitchDevice:
    
    def __init__(self, logger: Logger):
        self.__class__.name: str = 'SwitchDevice'
        self.__class__._connected: bool = False
        self.__class__._logger = logger

        # Device properties
        self.__class__._maxswitch: int = 8
        self.__class__._canwrite: bool = True
        self.__class__._minswitchvalue: float = 0.0
        self.__class__._maxswitchvalue: float = 1.0
        self.__class__._switchstep: int = 1.0
        
        self.__class__._switch = {
            0:{
                'Name': 'Roof',
                'Description': 'Roof power',
                'Switchpinout': 21,
                'State': False        
            },
            
            1:{
                'Name': 'Telescope mount',
                'Description': 'Telescope mount power',
                'Switchpinout': 20,
                'State': False         
            },
            
            2:{
                'Name': 'Light',
                'Description': 'Light power',
                'Switchpinout': 16,
                'State': False         
            },
            
            3:{
                'Name': 'Flat box',
                'Description': 'Flat box power',
                'Switchpinout': 12,
                'State': False    
            },
            
            4:{
                'Name': 'Aux1',
                'Description': 'Ancillary dev1',
                'Switchpinout': 1,
                'State': False         
            },
            
            5:{
                'Name': 'Aux2',
                'Description': 'Ancillary dev2',
                'Switchpinout': 7,
                'State': False         
            },
            
            6:{
                'Name': 'Aux3',
                'Description': 'Ancillary dev3',
                'Switchpinout': 8,
                'State': False         
            },
            
            7:{
                'Name': 'Aux4',
                'Description': 'Ancillary dev4',
                'Switchpinout': 18,
                'State': False        
            },
            
            }

    #
    # Guarded properties
    #
    @property
    def maxswitch(self) -> int:
        res = self.__class__._maxswitch
        return res
    
    @property
    def connected(self) -> bool:
        res = self.__class__._connected
        return res
    
    @connected.setter
    def connected(self, connected: bool):
        if connected == self.__class__._connected:
            return
        else:
            self.__class__._connected = connected
        
        if connected:
            for key, val in self.__class__._switch.items():
                GPIO.setup(val['Switchpinout'], GPIO.OUT)
                GPIO.output(val['Switchpinout'], True)

    #    
    # GET, SET METHOD (need more than self parameter)
    #
    
    def get_switch(self, idx) -> bool:
        res = self.__class__._switch[idx]['State']
        return res
    
    def set_switch(self, idx, state):
        self.__class__._switch[idx]['State'] = state
        GPIO.output(self.__class__._switch[idx]['Switchpinout'], not state)
        
    def get_minswitchvalue(self, key) -> float:
        res = self.__class__._minswitchvalue
        return res
    
    def get_maxswitchvalue(self, key) -> float:
        res = self.__class__._maxswitchvalue
        return res
    
    def get_switchstep(self, key) -> float:
        res = self.__class__._switchstep
        return res
    
    def get_canwrite(self, key) -> bool:
        res = self.__class__._canwrite
        return res
    
    def get_switchdescription(self, idx) -> str:
        key = 'Description'
        res = self.__class__._switch[idx][key]
        return res
    
    def get_switchname(self, idx) -> str:
        key = 'Name'
        res = self.__class__._switch[idx][key]
        return res
    
    def set_switchname(self, idx, value) -> None:
        key = 'Name'
        self.__class__._switch[idx][key] = value