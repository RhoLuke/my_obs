
# -*- coding: utf-8 -*-
#
# -----------------------------------------------------------------------------
# observingconditions.py - Alpaca API responders for Observingconditions
#
# Author:   Luca Rosignoli
#
# -----------------------------------------------------------------------------
# Edit History:
#   Generated by Python Interface Generator for AlpycaDevice
#
# ??-???-????   abc Initial edit

from falcon import Request, Response, HTTPBadRequest, before
from logging import Logger
from shr import PropertyResponse, MethodResponse, PreProcessRequest, \
                get_request_field, to_bool, to_int, to_float
from exceptions import *        # Nothing but exception classes
from weatherdevice import WeatherDevice
import pickle

logger: Logger = None

# ----------------------
# MULTI-INSTANCE SUPPORT
# ----------------------
# If this is > 0 then it means that multiple devices of this type are supported.
# Each responder on_get() and on_put() is called with a devnum parameter to indicate
# which instance of the device (0-based) is being called by the client. Leave this
# set to 0 for the simple case of controlling only one instance of this device type.
#
maxdev = 0                      # Single instance

# -----------
# DEVICE INFO
# -----------
# Static metadata not subject to configuration changes
## EDIT FOR YOUR DEVICE ##
class ObservingconditionsMetadata:
    """ Metadata describing the Observingconditions Device. Edit for your device"""
    Name = 'Sample Observingconditions'
    Version = '0.0.1'
    Description = 'My ASCOM Observingconditions'
    DeviceType = 'Observingconditions'
    DeviceID = 'F0D2D151-9069-4258-B0FA-10171E96155A' # https://guidgenerator.com/online-guid-generator.aspx
    Info = 'Alpaca Sample Device\nImplements IObservingconditions\nASCOM Initiative'
    MaxDeviceNumber = maxdev
    InterfaceVersion = 1 ##YOUR DEVICE INTERFACE VERSION##        # IObservingconditionsVxxx


wth_dev = None

# At app init not import :-)
def start_wth_device(logger: logger):
    logger = logger
    global wth_dev
    wth_dev = WeatherDevice(logger)


# --------------------
# RESOURCE CONTROLLERS
# --------------------

@before(PreProcessRequest(maxdev))
class Action:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandBlind:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandBool:
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class CommandString():
    def on_put(self, req: Request, resp: Response, devnum: int):
        resp.text = MethodResponse(req, NotImplementedException()).json

@before(PreProcessRequest(maxdev))
class Description():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(ObservingconditionsMetadata.Description, req).json

@before(PreProcessRequest(maxdev))
class DriverInfo():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(ObservingconditionsMetadata.Info, req).json

@before(PreProcessRequest(maxdev))
class InterfaceVersion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(ObservingconditionsMetadata.InterfaceVersion, req).json

@before(PreProcessRequest(maxdev))
class DriverVersion():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(ObservingconditionsMetadata.Version, req).json

@before(PreProcessRequest(maxdev))
class Name():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(ObservingconditionsMetadata.Name, req).json

@before(PreProcessRequest(maxdev))
class SupportedActions():
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse([], req).json  # Not PropertyNotImplemented

@before(PreProcessRequest(maxdev))
class Connected:
    """Retrieves or sets the connected state of the device
    * Set True to connect to the device hardware. Set False to disconnect
      from the device hardware. Client can also read the property to check
      whether it is connected. This reports the current hardware state.
    * Multiple calls setting Connected to true or false must not cause
      an error.

    """
    def on_get(self, req: Request, resp: Response, devnum: int):
        resp.text = PropertyResponse(wth_dev.connected, req).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        conn_str = get_request_field('Connected', req)
        conn = to_bool(conn_str)              # Raises 400 Bad Request if str to bool fails

        try:
            # ----------------------
            if not wth_dev.connected:
                wth_dev.connected = conn
            # ----------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req, # Put is actually like a method :-(
                            DriverException(0x500, f'{self.__class__.__name__} failed', ex)).json
            
@before(PreProcessRequest(maxdev))
class averageperiod:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = wth_dev.avperiod
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Averageperiod failed', ex)).json

    def on_put(self, req: Request, resp: Response, devnum: int):
        
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        averageperiodstr = get_request_field('AveragePeriod', req)      # Raises 400 bad request if missing
        try:
            averageperiod = float(averageperiodstr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'AveragePeriod " + averageperiodstr + " not a valid number.')).json
            return
        
        ### RANGE CHECK AS NEEDED ###       # Raise Alpaca InvalidValueException with details!
        if averageperiod < 0.0 :
            resp.text = MethodResponse(req,
                            InvalidValueException(f'AveragePeriod " + averageperiodstr + " not a valid number.')).json
            return
        try:
            # -----------------------------
            wth_dev.avperiod = averageperiod
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Observingconditions.Averageperiod failed', ex)).json
'''
    def on_put(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            ### DEVICE OPERATION(PARAM) ###
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Observingconditions.Averageperiod failed', ex)).json'''

@before(PreProcessRequest(maxdev))
class cloudcover:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = wth_dev.get_sensor_value('CloudCover')
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Cloudcover failed', ex)).json

@before(PreProcessRequest(maxdev))
class dewpoint:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = wth_dev.get_sensor_value('DewPoint')
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Dewpoint failed', ex)).json

@before(PreProcessRequest(maxdev))
class humidity:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = wth_dev.get_sensor_value('Humidity')
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Humidity failed', ex)).json

@before(PreProcessRequest(maxdev))
class pressure:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0.0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Pressure failed', ex)).json

@before(PreProcessRequest(maxdev))
class rainrate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = wth_dev.get_sensor_value('RainRate')
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Rainrate failed', ex)).json

@before(PreProcessRequest(maxdev))
class skybrightness:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0.0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Skybrightness failed', ex)).json

@before(PreProcessRequest(maxdev))
class skyquality:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0.0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Skyquality failed', ex)).json

@before(PreProcessRequest(maxdev))
class skytemperature:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = wth_dev.get_sensor_value('SkyTemp')
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Skytemperature failed', ex)).json

@before(PreProcessRequest(maxdev))
class starfwhm:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0.0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Starfwhm failed', ex)).json

@before(PreProcessRequest(maxdev))
class temperature:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = val = wth_dev.get_sensor_value('InsideTemp')
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Temperature failed', ex)).json

@before(PreProcessRequest(maxdev))
class winddirection:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0.0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Winddirection failed', ex)).json

@before(PreProcessRequest(maxdev))
class windgust:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0.0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Windgust failed', ex)).json

@before(PreProcessRequest(maxdev))
class windspeed:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = 0.0
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Windspeed failed', ex)).json

@before(PreProcessRequest(maxdev))
class refresh:

    def on_put(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # -----------------------------
            wth_dev.refresh = True
            # -----------------------------
            resp.text = MethodResponse(req).json
        except Exception as ex:
            resp.text = MethodResponse(req,
                            DriverException(0x500, 'Observingconditions.Refresh failed', ex)).json

@before(PreProcessRequest(maxdev))
class sensordescription:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        
        namestr = get_request_field('SensorName', req)      # Raises 400 bad request if missing
        try:
            name = str(namestr)
        except:
            resp.text = MethodResponse(req,
                            InvalidValueException(f'Sensor Name " + namestr + " not a valid name.')).json
            return
        try:
            # ----------------------
            if name in wth_dev.__class__._sensors.keys():
                val = wth_dev.get_sensor_description(name)
            else:
                val = 'Sensor not implemented'
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Sensordescription failed', ex)).json

@before(PreProcessRequest(maxdev))
class timesincelastupdate:

    def on_get(self, req: Request, resp: Response, devnum: int):
        if not wth_dev.connected:
            resp.text = PropertyResponse(None, req,
                            NotConnectedException()).json
            return
        try:
            # ----------------------
            val = wth_dev.readout_time
            # ----------------------
            resp.text = PropertyResponse(val, req).json
        except Exception as ex:
            resp.text = PropertyResponse(None, req,
                            DriverException(0x500, 'Observingconditions.Timesincelastupdate failed', ex)).json

